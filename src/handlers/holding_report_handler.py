import os
import asyncio
import logging
from typing import Dict
from fastapi import Request
import discord
from dotenv import load_dotenv

from .common import (
    get_push_targets, format_float
)

load_dotenv()

logger = logging.getLogger(__name__)

def validate_holding_report(data) -> None:
    """ÊîØÊåÅÊâπÈáètrader+infosÁªìÊûÑÁöÑÊ†°È™å"""
    if isinstance(data, list):
        if not data:
            raise ValueError("ÂàóË°®‰∏çËÉΩÁÇ∫Á©∫")
        for i, trader in enumerate(data):
            if not isinstance(trader, dict):
                raise ValueError(f"ÂàóË°®È†ÖÁõÆ {i} ÂøÖÈ†àÁÇ∫Â≠óÂÖ∏Ê†ºÂºèÔºåÊî∂Âà∞: {type(trader)}")
            # Ê†°È™åtrader‰∏ªÂ≠óÊÆµ
            required_fields = {"trader_uid", "trader_name", "trader_detail_url"}
            missing = [f for f in required_fields if not trader.get(f)]
            if missing:
                raise ValueError(f"trader {i} Áº∫Â∞ëÊ¨Ñ‰Ωç: {', '.join(missing)}")
            # Ê†°È™åinfos
            infos = trader.get("infos")
            if not infos or not isinstance(infos, list):
                raise ValueError(f"trader {i} Áº∫Â∞ëinfosÊàñÊ†ºÂºèÈåØË™§")
            for j, info in enumerate(infos):
                validate_single_holding_report(info, f"trader {i} - info {j}")
    elif isinstance(data, dict):
        # Âçï‰∏™trader
        required_fields = {"trader_uid", "trader_name", "trader_detail_url"}
        missing = [f for f in required_fields if not data.get(f)]
        if missing:
            raise ValueError(f"trader Áº∫Â∞ëÊ¨Ñ‰Ωç: {', '.join(missing)}")
        infos = data.get("infos")
        if not infos or not isinstance(infos, list):
            raise ValueError(f"trader Áº∫Â∞ëinfosÊàñÊ†ºÂºèÈåØË™§")
        for j, info in enumerate(infos):
            validate_single_holding_report(info, f"info {j}")
    else:
        raise ValueError("Ë´ãÊ±ÇË≥áÊñôÂøÖÈ†àÁÇ∫Â≠óÂÖ∏ÊàñÂàóË°®Ê†ºÂºè")

def validate_single_holding_report(data: dict, prefix: str = "") -> None:
    """È©óË≠âÂñÆÂÄãÊåÅÂÄâÂ†±ÂëäÈ†ÖÁõÆÔºàÂè™Ê†°È™åÂ∏ÅÁßçÁõ∏ÂÖ≥Â≠óÊÆµÔºâ"""
    required_fields = {
        "pair", "pair_side", "pair_margin_type", "pair_leverage",
        "entry_price", "current_price", "unrealized_pnl_percentage"
    }
    missing = [f for f in required_fields if not data.get(f)]
    if missing:
        error_msg = f"Áº∫Â∞ëÊ¨Ñ‰Ωç: {', '.join(missing)}"
        if prefix:
            error_msg = f"{prefix} - {error_msg}"
        raise ValueError(error_msg)

    # Ê™¢Êü• pair_side
    if str(data["pair_side"]) not in {"1", "2"}:
        error_msg = "pair_side Âè™ËÉΩÊòØ '1'(Long) Êàñ '2'(Short)"
        if prefix:
            error_msg = f"{prefix} - {error_msg}"
        raise ValueError(error_msg)

    # Ê™¢Êü• pair_margin_type
    if str(data["pair_margin_type"]) not in {"1", "2"}:
        error_msg = "pair_margin_type Âè™ËÉΩÊòØ '1'(Cross) Êàñ '2'(Isolated)"
        if prefix:
            error_msg = f"{prefix} - {error_msg}"
        raise ValueError(error_msg)

    # Êï∏ÂÄºÊ™¢Êü•
    try:
        float(data["entry_price"])
        float(data["current_price"])
        float(data["unrealized_pnl_percentage"])
        float(data["pair_leverage"])
        # Ê™¢Êü•ÂèØÈÅ∏ÁöÑÊ≠¢ÁõàÊ≠¢ÊêçÂÉπÊ†º
        if data.get("tp_price") not in (None, "", "None"):
            float(data["tp_price"])
        if data.get("sl_price") not in (None, "", "None"):
            float(data["sl_price"])
    except (TypeError, ValueError):
        error_msg = "Êï∏ÂÄºÊ¨Ñ‰ΩçÂøÖÈ†àÁÇ∫Êï∏Â≠óÊ†ºÂºè"
        if prefix:
            error_msg = f"{prefix} - {error_msg}"
        raise ValueError(error_msg)

async def process_holding_report_discord(data: dict, bot) -> None:
    """ËÉåÊôØÂçîÁ®ãÔºöËôïÁêÜÊåÅÂÄâÂ†±ÂëäÊé®ÈÄÅÂà∞ DiscordÔºåÊîØÊè¥Â§ötraderÔºåÊØèÂÄãtraderÂêà‰ΩµÊâÄÊúâinfosÁôº‰∏ÄÊ¢ùË®äÊÅØ"""
    logger.info("[HoldingReport] ÈñãÂßãÂü∑Ë°åËÉåÊôØËôïÁêÜ‰ªªÂãô")
    try:
        # ÊîØÊè¥Â§öÂÄã trader
        traders = data if isinstance(data, list) else [data]
        for trader in traders:
            trader_uid = str(trader["trader_uid"])
            logger.info(f"[HoldingReport] ËôïÁêÜ‰∫§ÊòìÂì° UID: {trader_uid}")

            # Áç≤ÂèñÊé®ÈÄÅÁõÆÊ®ô
            push_targets = await get_push_targets(trader_uid)
            logger.info(f"[HoldingReport] Áç≤ÂèñÂà∞ {len(push_targets)} ÂÄãÊé®ÈÄÅÁõÆÊ®ô")

            if not push_targets:
                logger.warning(f"[HoldingReport] Êú™ÊâæÂà∞Á¨¶ÂêàÊ¢ù‰ª∂ÁöÑÊåÅÂÄâÂ†±ÂëäÊé®ÈÄÅÈ†ªÈÅì: {trader_uid}")
                continue

            infos = trader.get("infos")
            logger.info(f"[HoldingReport] trader_name={trader.get('trader_name')} infos={infos}")
            await send_holding_to_all_targets(infos, trader, push_targets, bot)

    except Exception as e:
        logger.error(f"[HoldingReport] Êé®ÈÄÅÊåÅÂÄâÂ†±ÂëäÂà∞ Discord Â§±Êïó: {type(e).__name__} - {e}")
        import traceback
        logger.error(f"[HoldingReport] Ë©≥Á¥∞ÈåØË™§: {traceback.format_exc()}")

async def send_holding_to_all_targets(infos, trader, push_targets, bot):
    tasks = []
    for channel_id, topic_id, jump in push_targets:
        # Ê†πÊìö jump ÂÄºÊ±∫ÂÆöÊòØÂê¶ÂåÖÂê´ÈÄ£Áµê
        include_link = (jump == "1")
        
        if infos and isinstance(infos, list):
            logger.info(f"[HoldingReport] infos Èï∑Â∫¶: {len(infos)}")
            # Âêà‰ΩµÊâÄÊúâ infosÔºåÁôº‰∏ÄÊ¢ùË®äÊÅØ
            text = format_holding_report_list_text(infos, trader, include_link)
        else:
            logger.info(f"[HoldingReport] ÁÑ° infos Êàñ‰∏çÊòØ listÔºå‰ΩøÁî®ÂñÆ‰∏ÄÊåÅÂÄâÊ†ºÂºè")
            # Ê≤íÊúâ infosÔºåÁï∂‰ΩúÂñÆ‰∏ÄÊåÅÂÄâ
            text = format_holding_report_text(trader, include_link)
        
        tasks.append(
            send_discord_message(
                bot=bot,
                channel_id=channel_id,
                text=text
            )
        )
    await asyncio.gather(*tasks, return_exceptions=True)

async def send_discord_message(bot, channel_id: int, text: str) -> None:
    """ÁôºÈÄÅ Discord Ê∂àÊÅØ"""
    logger.info(f"[HoldingReport] ÈñãÂßãÁôºÈÄÅÊ∂àÊÅØÂà∞È†ªÈÅì {channel_id}")
    try:
        channel = bot.get_channel(channel_id)
        if not channel:
            logger.warning(f"[HoldingReport] Êâæ‰∏çÂà∞È†ªÈÅì {channel_id}")
            return

        logger.info(f"[HoldingReport] ÊâæÂà∞È†ªÈÅì: {channel.name} (ID: {channel_id})")

        # Ê™¢Êü•Ê¨äÈôê
        permissions = channel.permissions_for(channel.guild.me)
        logger.info(f"[HoldingReport] È†ªÈÅìÊ¨äÈôêÊ™¢Êü• - ÁôºÈÄÅÊ∂àÊÅØ: {permissions.send_messages}")
        
        if not permissions.send_messages:
            logger.warning(f"[HoldingReport] Âú®È†ªÈÅì {channel_id} ‰∏≠Ê≤íÊúâÁôºÈÄÅÊ∂àÊÅØÁöÑÊ¨äÈôê")
            return

        logger.info(f"[HoldingReport] ÁôºÈÄÅÊ∂àÊÅØÂà∞È†ªÈÅì {channel_id}")
        await channel.send(content=text, allowed_mentions=discord.AllowedMentions.none())

        logger.info(f"[HoldingReport] ÊàêÂäüÁôºÈÄÅÂà∞ Discord È†ªÈÅì {channel_id}")

    except discord.Forbidden as e:
        logger.error(f"[HoldingReport] Ê¨äÈôêÈåØË™§ - ÁôºÈÄÅÂà∞ Discord È†ªÈÅì {channel_id} Â§±Êïó: {e}")
    except discord.HTTPException as e:
        logger.error(f"[HoldingReport] HTTP ÈåØË™§ - ÁôºÈÄÅÂà∞ Discord È†ªÈÅì {channel_id} Â§±Êïó: {e}")
    except Exception as e:
        logger.error(f"[HoldingReport] Êú™Áü•ÈåØË™§ - ÁôºÈÄÅÂà∞ Discord È†ªÈÅì {channel_id} Â§±Êïó: {type(e).__name__} - {e}")
        import traceback
        logger.error(f"[HoldingReport] Ë©≥Á¥∞ÈåØË™§: {traceback.format_exc()}")

def format_holding_report_text(data: dict, include_link: bool = True) -> str:
    """Ê†ºÂºèÂåñÊåÅÂÄâÂ†±ÂëäÊñáÊú¨"""
    # ÊñáÊ°àÊò†Â∞Ñ
    pair_side_map = {"1": "Long", "2": "Short", 1: "Long", 2: "Short"}
    margin_type_map = {"1": "Cross", "2": "Isolated", 1: "Cross", 2: "Isolated"}
    
    pair_side = pair_side_map.get(str(data.get("pair_side", "")), str(data.get("pair_side", "")))
    margin_type = margin_type_map.get(str(data.get("pair_margin_type", "")), str(data.get("pair_margin_type", "")))
    
    # Ê†ºÂºèÂåñÊï∏ÂÄº
    entry_price = str(data.get("entry_price", 0))
    current_price = str(data.get("current_price", 0))
    roi = format_float(data.get("unrealized_pnl_percentage", 0) * 100)
    leverage = format_float(data.get("pair_leverage", 0))
    
    # Âà§Êñ∑ÊòØÂê¶ÊúâË®≠ÁΩÆÊ≠¢ÁõàÊ≠¢Êêç
    has_tp = bool(data.get("tp_price"))
    has_sl = bool(data.get("sl_price"))
    
    text = (
        f"üìä **Holding Report**\n\n"
        f"‚ö°Ô∏è**{data.get('trader_name', 'Trader')}** Trading Summary (Updated every 12 hours)\n\n"
        f"**{data.get('pair', '')}** {margin_type} **{leverage}X**\n"
        f"Direction: {pair_side}\n"
        f"Entry Price: ${entry_price}\n"
        f"Current Price: ${current_price}\n"
        f"ROI: {roi}%"
    )
    
    # Â¶ÇÊûúÊúâË®≠ÁΩÆÊ≠¢ÁõàÊ≠¢ÊêçÔºåÊ∑ªÂä†Áõ∏Èóú‰ø°ÊÅØ
    tp_sl_lines = []
    if has_tp:
        tp_price = str(data.get("tp_price", 0))
        tp_sl_lines.append(f"‚úÖTP Price: ${tp_price}")
    if has_sl:
        sl_price = str(data.get("sl_price", 0))
        tp_sl_lines.append(f"üõëSL Price: ${sl_price}")
    
    if tp_sl_lines:
        text += "\n" + "\n".join(tp_sl_lines)
    
    if include_link:
        # ‰ΩøÁî® Discord Markdown Ê†ºÂºèÂâµÂª∫ÂèØÈªûÊìäÁöÑË∂ÖÈÄ£Áµê
        trader_name = data.get('trader_name', 'Trader')
        detail_url = data.get('trader_detail_url', '')
        text += f"\n\n[About {trader_name}, more actions>>]({detail_url})"
    
    return text

def format_holding_report_list_text(infos: list, trader: dict, include_link: bool = True) -> str:
    logger.info(f"[HoldingReport] format_holding_report_list_text called, infos={infos}")
    if not infos:
        return ""
    trader_name = trader.get('trader_name', 'Trader')
    text = f"‚ö°Ô∏è{trader_name} Trading Summary (Updated every 12 hours)\n\n"
    for i, data in enumerate(infos, 1):
        pair_side_map = {"1": "Long", "2": "Short", 1: "Long", 2: "Short"}
        margin_type_map = {"1": "Cross", "2": "Isolated", 1: "Cross", 2: "Isolated"}
        pair_side = pair_side_map.get(str(data.get("pair_side", "")), str(data.get("pair_side", "")))
        margin_type = margin_type_map.get(str(data.get("pair_margin_type", "")), str(data.get("pair_margin_type", "")))
        entry_price = str(data.get("entry_price", 0))
        current_price = str(data.get("current_price", 0))
        roi = format_float(float(data.get("unrealized_pnl_percentage", 0)) * 100)
        leverage = format_float(data.get("pair_leverage", 0))
        has_tp = data.get("tp_price") not in (None, "None", "null", "")
        has_sl = data.get("sl_price") not in (None, "None", "null", "")
        text += (
            f"**{i}. {data.get('pair', '')} {margin_type} {leverage}X**\n"
            f"‚û°Ô∏èDirection: {pair_side}\n"
            f"üéØEntry Price: ${entry_price}\n"
            f"üìäCurrent Price: ${current_price}\n"
            f"üöÄROI: {roi}%"
        )
        tp_sl_lines = []
        if has_tp:
            tp_price = str(data.get("tp_price", 0))
            tp_sl_lines.append(f"‚úÖTP Price: ${tp_price}")
        if has_sl:
            sl_price = str(data.get("sl_price", 0))
            tp_sl_lines.append(f"üõëSL Price: ${sl_price}")
        if tp_sl_lines:
            text += "\n" + "\n".join(tp_sl_lines)
        text += "\n\n"
    text = text.rstrip('\n')
    if include_link:
        detail_url = trader.get('trader_detail_url', '')
        text += f"\n\n[About {trader_name}, more actions>>]({detail_url})"
    return text

async def handle_holding_report(request: Request, bot) -> Dict:
    """
    ËôïÁêÜ /api/report/holdings ‰ªãÈù¢Ôºö
    1. ÂÖàÂêåÊ≠•È©óË≠âËº∏ÂÖ•Ë≥áÊñôÔºåÂ§±ÊïóÁõ¥Êé•ÂõûÂÇ≥ 400„ÄÇ
    2. ÊàêÂäüÂâáÁ´ãÂç≥Âõû 200Ôºå‰∏¶Â∞áÂØ¶ÈöõÊé®ÈÄÅÂ∑•‰Ωú‰∫§Áî±ËÉåÊôØÂçîÁ®ãËôïÁêÜ„ÄÇ
    """
    logger.info("[HoldingReport] ÈñãÂßãËôïÁêÜ holding report Ë´ãÊ±Ç")
    
    # Content-Type Ê™¢Êü•
    content_type = request.headers.get("content-type", "").split(";")[0].lower()
    logger.info(f"[HoldingReport] Content-Type: {content_type}")
    if content_type != "application/json":
        logger.error(f"[HoldingReport] Content-Type ÈåØË™§: {content_type}")
        return {"status": "400", "message": "Content-Type must be application/json"}

    # Ëß£Êûê JSON
    try:
        data = await request.json()
        if isinstance(data, dict):
            logger.info(f"[HoldingReport] ÊàêÂäüËß£Êûê JSON Êï∏Êìö: {list(data.keys())}")
        elif isinstance(data, list):
            logger.info(f"[HoldingReport] ÊàêÂäüËß£Êûê JSON Êï∏Êìö: list, Èï∑Â∫¶={len(data)}")
        else:
            logger.info(f"[HoldingReport] ÊàêÂäüËß£Êûê JSON Êï∏Êìö: type={type(data)}")
    except Exception as e:
        logger.error(f"[HoldingReport] JSON Ëß£ÊûêÂ§±Êïó: {e}")
        return {"status": "400", "message": "Invalid JSON body"}

    # Ë≥áÊñôÈ©óË≠â
    try:
        validate_holding_report(data)
        logger.info("[HoldingReport] Êï∏ÊìöÈ©óË≠âÈÄöÈÅé")
    except ValueError as err:
        logger.error(f"[HoldingReport] Êï∏ÊìöÈ©óË≠âÂ§±Êïó: {err}")
        return {"status": "400", "message": str(err)}

    # ËÉåÊôØËôïÁêÜÔºöÂú® Discord ‰∫ã‰ª∂Ëø¥ÂúàÂü∑Ë°å
    logger.info("[HoldingReport] ÈñãÂßãËÉåÊôØËôïÁêÜÔºåË™øÂ∫¶Âà∞ Discord ‰∫ã‰ª∂Ëø¥Âúà")
    try:
        asyncio.run_coroutine_threadsafe(process_holding_report_discord(data, bot), bot.loop)
        logger.info("[HoldingReport] ÊàêÂäüË™øÂ∫¶ËÉåÊôØ‰ªªÂãô")
    except Exception as e:
        logger.error(f"[HoldingReport] Ë™øÂ∫¶ËÉåÊôØ‰ªªÂãôÂ§±Êïó: {e}")
        return {"status": "500", "message": "Internal server error"}
    
    return {"status": "200", "message": "Êé•Êî∂ÊàêÂäüÔºåÁ®çÂæåÁôºÈÄÅ"} 